import { NextRequest, NextResponse } from 'next/server'

/**
 * POST /api/404/analyze
 * Analyse GPT-4 des patterns 404
 */

interface AnalyzeRequest {
  results: Array<{
    site: string
    errors_list: string[]
    broken_links_list?: Array<{ source: string; target: string }>
  }>
}

interface Pattern {
  type: string
  description: string
  count: number
  examples: string[]
  severity: 'critical' | 'high' | 'medium' | 'low'
}

interface Fix {
  priority: 'P1' | 'P2' | 'P3'
  title: string
  description: string
  affected_sites: string[]
  affected_count: number
  action: string
  estimated_effort: 'Faible' | 'Moyen' | '√âlev√©'
}

interface AnalysisResult {
  summary: string
  total_errors: number
  patterns: Pattern[]
  fixes: Fix[]
  insights: string[]
}

export const dynamic = 'force-dynamic'

const SYSTEM_PROMPT = `Tu es un expert en analyse de sites web et d'erreurs 404.

Ton r√¥le :
1. Analyser les URLs 404 pour identifier les PATTERNS communs (pas site par site)
2. Regrouper les erreurs par type de probl√®me
3. Proposer des correctifs concrets par ordre de PRIORIT√â

Tu retournes UNIQUEMENT du JSON valide avec cette structure :
{
  "summary": "R√©sum√© en 2-3 phrases de la situation globale",
  "total_errors": number,
  "patterns": [
    {
      "type": "nom_du_pattern",
      "description": "Description du pattern d√©tect√©",
      "count": number,
      "examples": ["url1", "url2", "url3"],
      "severity": "critical" | "high" | "medium" | "low"
    }
  ],
  "fixes": [
    {
      "priority": "P1" | "P2" | "P3",
      "title": "Titre court du correctif",
      "description": "Description d√©taill√©e du probl√®me",
      "affected_sites": ["site1.fr", "site2.fr"],
      "affected_count": number,
      "action": "Action concr√®te √† r√©aliser",
      "estimated_effort": "Faible" | "Moyen" | "√âlev√©"
    }
  ],
  "insights": [
    "Insight 1 : observation int√©ressante",
    "Insight 2 : tendance d√©tect√©e"
  ]
}

PATTERNS COURANTS √Ä D√âTECTER :
- Pages blog supprim√©es (ex: /blog/ancien-article)
- Anciennes pages de service (ex: /services/vieux-nom)
- Erreurs de typo dans les liens (ex: /contacT au lieu de /contact)
- Liens vers anciennes structures d'URL
- Pages avec accents mal encod√©s
- Pagination cass√©e (ex: /blog/page/999)
- Fichiers assets manquants (ex: /images/old-logo.png)

R√àGLES :
- Max 5-6 patterns diff√©rents
- Max 8 fixes prioris√©s (4 P1, 2-3 P2, 1-2 P3)
- Fixes concrets et actionnables
- P1 = impact √©lev√© + effort faible
- Regrouper les erreurs similaires (pas lister toutes les URLs)
- Focus sur les actions qui r√©solvent le PLUS d'erreurs
`

export async function POST(request: NextRequest) {
  try {
    const body: AnalyzeRequest = await request.json()
    
    if (!process.env.OPENAI_API_KEY) {
      return NextResponse.json(
        { 
          success: false, 
          error: 'OpenAI API key not configured',
          message: 'L\'analyse IA n√©cessite une cl√© OpenAI API' 
        },
        { status: 500 }
      )
    }
    
    // Import dynamique d'OpenAI uniquement au runtime (√©vite erreur au build)
    const { default: OpenAI } = await import('openai')
    
    // Instanciation lazy d'OpenAI (seulement au runtime, pas au build)
    const openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    })
    
    // Collecter toutes les erreurs
    const allErrors: Array<{ site: string; url: string }> = []
    const allBrokenLinks: Array<{ site: string; source: string; target: string }> = []
    
    body.results.forEach(result => {
      result.errors_list.forEach(url => {
        allErrors.push({ site: result.site, url })
      })
      
      result.broken_links_list?.forEach(link => {
        allBrokenLinks.push({
          site: result.site,
          source: link.source,
          target: link.target,
        })
      })
    })
    
    if (allErrors.length === 0) {
      return NextResponse.json({
        success: true,
        data: {
          summary: 'Aucune erreur 404 d√©tect√©e. Excellent travail ! üéâ',
          total_errors: 0,
          patterns: [],
          fixes: [],
          insights: ['Tous les sites sont en bonne sant√©', 'Aucun lien cass√© d√©tect√©'],
        },
      })
    }
    
    // Limiter le contexte envoy√© √† GPT (max 100 erreurs pour √©viter token overflow)
    const sampledErrors = allErrors.slice(0, 100)
    const sampledBrokenLinks = allBrokenLinks.slice(0, 50)
    
    const userMessage = `
Analyse ces erreurs 404 d√©tect√©es sur 11 sites de d√©m√©nagement :

## Erreurs 404 (${allErrors.length} total, √©chantillon de ${sampledErrors.length})
${sampledErrors.map(e => `- ${e.site}: ${e.url}`).join('\n')}

## Liens cass√©s (${allBrokenLinks.length} total, √©chantillon de ${sampledBrokenLinks.length})
${sampledBrokenLinks.map(l => `- ${l.site}: ${l.source} ‚Üí ${l.target}`).join('\n')}

Analyse les PATTERNS communs et propose des correctifs concrets par ordre de priorit√©.
`
    
    console.log('ü§ñ Sending analysis request to GPT-4...')
    
    const completion = await openai.chat.completions.create({
      model: 'gpt-4-turbo-preview',
      messages: [
        { role: 'system', content: SYSTEM_PROMPT },
        { role: 'user', content: userMessage },
      ],
      temperature: 0.7,
      max_tokens: 2000,
      response_format: { type: 'json_object' },
    })
    
    const analysisText = completion.choices[0].message.content
    if (!analysisText) {
      throw new Error('No response from OpenAI')
    }
    
    const analysis: AnalysisResult = JSON.parse(analysisText)
    
    console.log('‚úÖ Analysis completed:', {
      patterns: analysis.patterns.length,
      fixes: analysis.fixes.length,
    })
    
    return NextResponse.json({
      success: true,
      data: analysis,
      meta: {
        total_errors_analyzed: allErrors.length,
        total_broken_links: allBrokenLinks.length,
        sampled: sampledErrors.length < allErrors.length,
      },
    })
    
  } catch (error: any) {
    console.error('‚ùå Analysis error:', error)
    
    return NextResponse.json(
      {
        success: false,
        error: error.message,
        message: 'Erreur lors de l\'analyse IA',
      },
      { status: 500 }
    )
  }
}

