/**
 * Agent Traffic Analyst - Analyse d√©taill√©e du trafic (impressions/clics)
 * D√©clench√© automatiquement apr√®s chaque mise √† jour ETL
 */

import 'dotenv/config'
import { chatWithJSON } from '../shared/openai-client.js'
import { 
  getGSCSummary, 
  getVisibilityTrends,
  getLowCTRPages,
  getTopQueries,
  getTopPages
} from '../shared/bigquery-tools.js'
import type { Action, AgentResult } from '../core/types.js'
import { log } from '../../etl/shared/error-handler.js'

// ========================================
// PROMPT
// ========================================

const SYSTEM_PROMPT = `
Tu es un expert en analyse de trafic organique pour 11 sites de d√©m√©nagement par ville en France.

Ton r√¥le :
1. Analyser l'√©volution du trafic (impressions, clics, CTR, position)
2. Identifier les tendances significatives (hausses, baisses)
3. D√©tecter les opportunit√©s d'optimisation SEO
4. Rep√©rer les anomalies et alertes importantes

Tu retournes UNIQUEMENT du JSON valide avec cette structure :
{
  "insights": [
    {
      "type": "trend" | "opportunity" | "alert" | "anomaly",
      "priority": "critical" | "high" | "medium" | "low",
      "site": "marseille" | "toulouse" | ...,
      "metric": "impressions" | "clicks" | "ctr" | "position",
      "title": "Titre de l'insight",
      "description": "Description d√©taill√©e",
      "data": {
        "current": 12345,
        "previous": 11234,
        "change": +9.9,
        "unit": "%" | "clicks" | "impressions"
      },
      "recommendation": "Action recommand√©e si applicable"
    }
  ],
  "summary": "R√©sum√© global en 2-3 phrases",
  "highlights": [
    "Point 1 marquant",
    "Point 2 marquant",
    "Point 3 marquant"
  ]
}

R√®gles :
- Max 15 insights
- Prioriser par impact et urgence
- Analyser √©volution sur 7j et 30j
- Identifier patterns et corr√©lations
`

// ========================================
// AGENT
// ========================================

export async function runTrafficAnalyst(): Promise<AgentResult> {
  const startedAt = new Date()
  log('info', 'üìä Starting Traffic Analyst Agent...')

  try {
    // 1. Collecter les donn√©es d√©taill√©es
    log('info', 'Fetching detailed traffic data from BigQuery...')
    
    const [summary, trends, lowCTR, topQueries, topPages] = await Promise.all([
      getGSCSummary({ startDate: '30 DAY' }),
      getVisibilityTrends({ startDate: '30 DAY' }),
      getLowCTRPages({ limit: 20 }),
      getTopQueries({ limit: 30 }),
      getTopPages({ limit: 20 }),
    ])

    // 2. Pr√©parer le contexte pour GPT
    const context = {
      summary,
      trends7d: trends.filter((t: any) => {
        const daysDiff = new Date().getTime() - new Date(t.date).getTime()
        return daysDiff <= 7 * 24 * 60 * 60 * 1000
      }),
      lowCTR: lowCTR.slice(0, 10),
      topQueries: topQueries.slice(0, 20),
      topPages: topPages.slice(0, 15),
    }

    const userMessage = `
Analyse ces donn√©es de trafic et identifie les insights importants :

## Vue d'ensemble (30 derniers jours)
${JSON.stringify(context.summary, null, 2)}

## Tendances r√©centes (7 derniers jours)
${JSON.stringify(context.trends7d, null, 2)}

## Pages √† faible CTR (potentiel non exploit√©)
${JSON.stringify(context.lowCTR, null, 2)}

## Top requ√™tes (30 derniers jours)
${JSON.stringify(context.topQueries, null, 2)}

## Top pages par trafic
${JSON.stringify(context.topPages, null, 2)}

Propose une analyse d√©taill√©e avec insights, tendances, opportunit√©s et alertes.
`

    // 3. Appeler GPT-4
    log('info', 'Analyzing with GPT-4...')
    
    const result = await chatWithJSON<{
      insights: any[]
      summary: string
      highlights: string[]
    }>(SYSTEM_PROMPT, userMessage, {
      model: 'gpt-4-turbo-preview',
      temperature: 0.7,
      maxTokens: 4000,
    })

    // 4. Post-traiter les r√©sultats
    const insightsWithIds = result.insights.map((insight, idx) => ({
      ...insight,
      id: `traffic-${Date.now()}-${idx}`,
    }))

    const completedAt = new Date()
    const duration = (completedAt.getTime() - startedAt.getTime()) / 1000

    // Compter les types d'insights
    const counts = {
      trends: result.insights.filter(i => i.type === 'trend').length,
      opportunities: result.insights.filter(i => i.type === 'opportunity').length,
      alerts: result.insights.filter(i => i.type === 'alert').length,
      anomalies: result.insights.filter(i => i.type === 'anomaly').length,
    }

    log('info', `‚úÖ Traffic Analyst completed: ${insightsWithIds.length} insights (${counts.trends} trends, ${counts.opportunities} opportunities, ${counts.alerts} alerts, ${counts.anomalies} anomalies)`)

    return {
      agentName: 'traffic-analyst',
      executedAt: startedAt,
      duration,
      status: 'success',
      data: {
        insights: insightsWithIds,
        summary: result.summary,
        highlights: result.highlights,
        counts,
        context,
      },
    }
  } catch (error: any) {
    log('error', 'Traffic Analyst failed', { error: error.message })

    const completedAt = new Date()
    const duration = (completedAt.getTime() - startedAt.getTime()) / 1000

    return {
      agentName: 'traffic-analyst',
      executedAt: startedAt,
      duration,
      status: 'failed',
      data: null,
      error: error.message,
    }
  }
}

// ========================================
// CLI
// ========================================

if (import.meta.url === `file://${process.argv[1]}`) {
  runTrafficAnalyst().then(result => {
    console.log('\nüìä R√©sultat Traffic Analyst:')
    console.log(`  Status: ${result.status}`)
    console.log(`  Duration: ${result.duration}s`)
    
    if (result.status === 'success') {
      console.log(`  Total insights: ${result.data.insights.length}`)
      console.log(`\nüìù Summary: ${result.data.summary}`)
      
      console.log('\nüéØ Highlights:')
      result.data.highlights.forEach((highlight, idx) => {
        console.log(`  ${idx + 1}. ${highlight}`)
      })
      
      if (result.data.insights.length > 0) {
        console.log('\nüí° Top Insights:')
        result.data.insights.slice(0, 5).forEach((insight: any, idx: number) => {
          console.log(`\n  ${idx + 1}. [${insight.type.toUpperCase()}] ${insight.title}`)
          console.log(`     Site: ${insight.site}`)
          console.log(`     Description: ${insight.description}`)
          if (insight.data) {
            console.log(`     Donn√©es: ${insight.data.current} vs ${insight.data.previous} (${insight.data.change > 0 ? '+' : ''}${insight.data.change}${insight.data.unit})`)
          }
        })
      }
    } else {
      console.log(`  Error: ${result.error}`)
    }

    process.exit(result.status === 'failed' ? 1 : 0)
  })
}

